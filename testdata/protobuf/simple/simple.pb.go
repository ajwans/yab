// Code generated by protoc-gen-go. DO NOT EDIT.
// source: simple.proto

package simple

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Nested struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nested) Reset()         { *m = Nested{} }
func (m *Nested) String() string { return proto.CompactTextString(m) }
func (*Nested) ProtoMessage()    {}
func (*Nested) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ffd045dd4d042c1, []int{0}
}

func (m *Nested) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nested.Unmarshal(m, b)
}
func (m *Nested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nested.Marshal(b, m, deterministic)
}
func (m *Nested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nested.Merge(m, src)
}
func (m *Nested) XXX_Size() int {
	return xxx_messageInfo_Nested.Size(m)
}
func (m *Nested) XXX_DiscardUnknown() {
	xxx_messageInfo_Nested.DiscardUnknown(m)
}

var xxx_messageInfo_Nested proto.InternalMessageInfo

func (m *Nested) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Foo struct {
	Test                 int32    `protobuf:"varint,1,opt,name=test,proto3" json:"test,omitempty"`
	Nested               *Nested  `protobuf:"bytes,2,opt,name=nested,proto3" json:"nested,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Foo) Reset()         { *m = Foo{} }
func (m *Foo) String() string { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()    {}
func (*Foo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ffd045dd4d042c1, []int{1}
}

func (m *Foo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Foo.Unmarshal(m, b)
}
func (m *Foo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Foo.Marshal(b, m, deterministic)
}
func (m *Foo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Foo.Merge(m, src)
}
func (m *Foo) XXX_Size() int {
	return xxx_messageInfo_Foo.Size(m)
}
func (m *Foo) XXX_DiscardUnknown() {
	xxx_messageInfo_Foo.DiscardUnknown(m)
}

var xxx_messageInfo_Foo proto.InternalMessageInfo

func (m *Foo) GetTest() int32 {
	if m != nil {
		return m.Test
	}
	return 0
}

func (m *Foo) GetNested() *Nested {
	if m != nil {
		return m.Nested
	}
	return nil
}

func init() {
	proto.RegisterType((*Nested)(nil), "Nested")
	proto.RegisterType((*Foo)(nil), "Foo")
}

func init() { proto.RegisterFile("simple.proto", fileDescriptor_5ffd045dd4d042c1) }

var fileDescriptor_5ffd045dd4d042c1 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xce, 0xcc, 0x2d,
	0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe3, 0x62, 0xf3, 0x4b, 0x2d, 0x2e,
	0x49, 0x4d, 0x11, 0x12, 0xe1, 0x62, 0x2d, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4,
	0x60, 0x0d, 0x82, 0x70, 0x94, 0xac, 0xb8, 0x98, 0xdd, 0xf2, 0xf3, 0x85, 0x84, 0xb8, 0x58, 0x4a,
	0x52, 0x8b, 0x4b, 0xa0, 0x72, 0x60, 0xb6, 0x90, 0x3c, 0x17, 0x5b, 0x1e, 0x58, 0xab, 0x04, 0x93,
	0x02, 0xa3, 0x06, 0xb7, 0x11, 0xbb, 0x1e, 0xc4, 0xa4, 0x20, 0xa8, 0xb0, 0x51, 0x11, 0x17, 0xb3,
	0x53, 0x62, 0x91, 0x90, 0x20, 0x88, 0xaa, 0x12, 0x62, 0xd1, 0x73, 0xcb, 0xcf, 0x97, 0x02, 0x93,
	0x42, 0x32, 0x5c, 0x5c, 0x4e, 0x99, 0x29, 0x99, 0xc1, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0xc8, 0x32,
	0x1a, 0x8c, 0x06, 0x8c, 0x42, 0x32, 0x5c, 0x3c, 0xce, 0x39, 0x99, 0xa9, 0x79, 0x25, 0xd8, 0xe4,
	0x41, 0xb2, 0xc1, 0xa9, 0x45, 0x65, 0xa9, 0x45, 0x98, 0xb2, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x6f,
	0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x8e, 0x8f, 0xad, 0xe6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BarClient is the client API for Bar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BarClient interface {
	Baz(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Foo, error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (Bar_BidiStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Bar_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *Foo, opts ...grpc.CallOption) (Bar_ServerStreamClient, error)
}

type barClient struct {
	cc *grpc.ClientConn
}

func NewBarClient(cc *grpc.ClientConn) BarClient {
	return &barClient{cc}
}

func (c *barClient) Baz(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Foo, error) {
	out := new(Foo)
	err := c.cc.Invoke(ctx, "/Bar/Baz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (Bar_BidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bar_serviceDesc.Streams[0], "/Bar/BidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &barBidiStreamClient{stream}
	return x, nil
}

type Bar_BidiStreamClient interface {
	Send(*Foo) error
	Recv() (*Foo, error)
	grpc.ClientStream
}

type barBidiStreamClient struct {
	grpc.ClientStream
}

func (x *barBidiStreamClient) Send(m *Foo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *barBidiStreamClient) Recv() (*Foo, error) {
	m := new(Foo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *barClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Bar_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bar_serviceDesc.Streams[1], "/Bar/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &barClientStreamClient{stream}
	return x, nil
}

type Bar_ClientStreamClient interface {
	Send(*Foo) error
	CloseAndRecv() (*Foo, error)
	grpc.ClientStream
}

type barClientStreamClient struct {
	grpc.ClientStream
}

func (x *barClientStreamClient) Send(m *Foo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *barClientStreamClient) CloseAndRecv() (*Foo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Foo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *barClient) ServerStream(ctx context.Context, in *Foo, opts ...grpc.CallOption) (Bar_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bar_serviceDesc.Streams[2], "/Bar/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &barServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bar_ServerStreamClient interface {
	Recv() (*Foo, error)
	grpc.ClientStream
}

type barServerStreamClient struct {
	grpc.ClientStream
}

func (x *barServerStreamClient) Recv() (*Foo, error) {
	m := new(Foo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BarServer is the server API for Bar service.
type BarServer interface {
	Baz(context.Context, *Foo) (*Foo, error)
	BidiStream(Bar_BidiStreamServer) error
	ClientStream(Bar_ClientStreamServer) error
	ServerStream(*Foo, Bar_ServerStreamServer) error
}

// UnimplementedBarServer can be embedded to have forward compatible implementations.
type UnimplementedBarServer struct {
}

func (*UnimplementedBarServer) Baz(ctx context.Context, req *Foo) (*Foo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Baz not implemented")
}
func (*UnimplementedBarServer) BidiStream(srv Bar_BidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (*UnimplementedBarServer) ClientStream(srv Bar_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (*UnimplementedBarServer) ServerStream(req *Foo, srv Bar_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}

func RegisterBarServer(s *grpc.Server, srv BarServer) {
	s.RegisterService(&_Bar_serviceDesc, srv)
}

func _Bar_Baz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Foo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServer).Baz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bar/Baz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServer).Baz(ctx, req.(*Foo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bar_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BarServer).BidiStream(&barBidiStreamServer{stream})
}

type Bar_BidiStreamServer interface {
	Send(*Foo) error
	Recv() (*Foo, error)
	grpc.ServerStream
}

type barBidiStreamServer struct {
	grpc.ServerStream
}

func (x *barBidiStreamServer) Send(m *Foo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *barBidiStreamServer) Recv() (*Foo, error) {
	m := new(Foo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bar_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BarServer).ClientStream(&barClientStreamServer{stream})
}

type Bar_ClientStreamServer interface {
	SendAndClose(*Foo) error
	Recv() (*Foo, error)
	grpc.ServerStream
}

type barClientStreamServer struct {
	grpc.ServerStream
}

func (x *barClientStreamServer) SendAndClose(m *Foo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *barClientStreamServer) Recv() (*Foo, error) {
	m := new(Foo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bar_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Foo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BarServer).ServerStream(m, &barServerStreamServer{stream})
}

type Bar_ServerStreamServer interface {
	Send(*Foo) error
	grpc.ServerStream
}

type barServerStreamServer struct {
	grpc.ServerStream
}

func (x *barServerStreamServer) Send(m *Foo) error {
	return x.ServerStream.SendMsg(m)
}

var _Bar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Bar",
	HandlerType: (*BarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Baz",
			Handler:    _Bar_Baz_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidiStream",
			Handler:       _Bar_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Bar_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _Bar_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "simple.proto",
}
